import classNames from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import { Field } from 'react-final-form';
import { ValidationError } from '..';
import NumericInput from 'react-numeric-input';
import InputNumber from 'rc-input-number';

import css from './FieldNumberInput.module.css';

const FieldNumberInputComponent = props => {
  const {
    rootClassName,
    className,
    customOnChange,
    id,
    label,
    input,
    meta,
    children,
    config,
    autofocus,
    tooltip,
    ...rest
  } = props;
  const { min = 1, max = 1000, step = 1, customFormat } = config || {};
  if (label && !id) {
    throw new Error('id required when a label is given');
  }

  const { valid, invalid, touched, error } = meta;

  // Error message and input error styles are only shown if the
  // field has been touched and the validation has failed.
  const hasError = touched && invalid && error;

  const selectClasses = classNames(css.select, {
    [css.selectSuccess]: valid,
    [css.selectError]: hasError,
  });

  const handleOnChange = val => {
    customOnChange && customOnChange(val);
    input.onChange(val);
  };

  function customFormatFunc(num) {
    return num + ' ' + customFormat;
  }

  const selectProps = { className: selectClasses, id, value: 1, ...input, ...rest };
  const classes = classNames(rootClassName || css.root, className);
  const inputComp = (
    <InputNumber
      {...selectProps}
      autoFocus={autofocus}
      min={min}
      max={max}
      step={step}
      defaultValue={min}
      controls={true}
      // format={customFormat ? customFormatFunc : val => val}
      onChange={e => handleOnChange(e)}
    />
  );
  return (
    <div className={classes}>
      {label ? (
        <label className={css.inputLabel} htmlFor={id}>
          {label}
        </label>
      ) : null}
      <div>{inputComp}</div>
      <ValidationError fieldMeta={meta} />
    </div>
  );
};

FieldNumberInputComponent.defaultProps = {
  rootClassName: null,
  className: null,
  id: null,
  label: null,
  children: null,
};

const { string, object, node } = PropTypes;

FieldNumberInputComponent.propTypes = {
  rootClassName: string,
  className: string,

  // Label is optional, but if it is given, an id is also required so
  // the label can reference the input in the `for` attribute
  id: string,
  label: string,

  // Generated by final-form's Field component
  input: object.isRequired,
  meta: object.isRequired,

  children: node,
};

const FieldNumberInput = props => {
  return <Field component={FieldNumberInputComponent} {...props} />;
};

export default FieldNumberInput;
